name: Maven Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: "adopt"
          java-version: "11"

      # Installiere GitVersion
      - name: Install GitVersion
        run: |
          sudo apt-get update
          sudo apt-get install -y mono-devel
          wget https://github.com/GitTools/GitVersion/releases/download/v5.6.1/GitVersion_5.6.1.deb
          sudo dpkg -i GitVersion_5.6.1.deb

      # Führe GitVersion aus, um die Versionsnummer zu bestimmen
      - name: Get GitVersion
        id: git_version
        run: gitversion /output json > version.json

      - name: Download DEB Package
        run: |
          DEB_LINK="https://sourceforge.net/projects/tvbrowser/files/TV-Browser%20Releases%20%28Java%2011%20and%20higher%29/4.2.7/tvbrowser_4.2.7-1_all.deb/download"
          wget -O deb-package.deb "$DEB_LINK"

      - name: Install DEB Package
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-11-jre
          sudo apt-get install -y default-jre
          sudo dpkg -i deb-package.deb

      - name: Import JAR file to Local Maven Repository
        run: mvn install:install-file -Dfile=/usr/share/tvbrowser/tvbrowser.jar -DgroupId=tvbrowser -DartifactId=core -Dversion=4.2.7 -Dpackaging=jar

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      # Erstelle eine Release, verwende dabei die von GitVersion ermittelte Versionsnummer
      - name: Create Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'  # Ausführen, wenn auf dem main-Branch gepusht wurde
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ fromJson(steps.git_version.outputs.stdout).MajorMinorPatch }}  # Verwende die von GitVersion ermittelte Versionsnummer
          release_name: Release ${{ fromJson(steps.git_version.outputs.stdout).MajorMinorPatch }}  # Verwende die von GitVersion ermittelte Versionsnummer
          draft: false
          prerelease: false

      - name: Upload Artifact
        if: steps.create_release.outputs.upload_url
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /home/runner/work/TvHBrowser/TvHBrowser/target/TvHBrowser.jar  # Hier den Pfad zu deinem Artefakt angeben
          asset_name: TvHBrowser.jar  # Hier den Namen deines Artefakts angeben
          asset_content_type: application/java-archive

      - name: Clean Up
        run: rm deb-package.deb

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target # Hier wird das target-Verzeichnis als Verzeichnis für das Deployment angegeben
